using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

public class OrderManager : MonoBehaviour
{

    [Header("Scene (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ-–ø–æ–∏—Å–∫–∞)")]
    public Box[] boxes;
    public DropoffPoint[] dropoffs;

    [Header("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤")]
    public bool autoGenerate = true;
    public float spawnInterval = 8f;
    public int maxActiveOrders = 3;

    [Serializable]
    public class Order
    {
        public string id;
        public Box box;
        public DropoffPoint dropoff;
    }

    private readonly List<Order> _active = new();
    private int _idCounter = 0;

    void Awake()
    {
        Debug.Log("[OrderManager] Awake() - –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é");
        
        if (dropoffs == null || dropoffs.Length == 0)
        {
            Debug.Log("[OrderManager] Dropoffs –Ω–µ –∑–∞–¥–∞–Ω—ã, –∏—â–µ–º –≤ —Å—Ü–µ–Ω–µ...");
            dropoffs = FindObjectsOfType<DropoffPoint>();
            Debug.Log($"[OrderManager] –ù–∞–π–¥–µ–Ω–æ DropoffPoint –≤ —Å—Ü–µ–Ω–µ: {dropoffs.Length}");
        }
        else
        {
            Debug.Log($"[OrderManager] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–¥–∞–Ω–Ω—ã–µ Dropoffs: {dropoffs.Length}");
        }

        // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Å–µ–±—è –∫–∞–∂–¥–æ–º—É dropoff
        foreach (var d in dropoffs)
        {
            if (d != null)
            {
                d.manager = this;
                Debug.Log($"[OrderManager] –ü—Ä–∏—Å–≤–æ–µ–Ω manager –¥–ª—è DropoffPoint: {d.name}");
            }
            else
            {
                Debug.LogWarning("[OrderManager] –ù–∞–π–¥–µ–Ω NULL DropoffPoint –≤ –º–∞—Å—Å–∏–≤–µ!");
            }
        }

        if (boxes == null || boxes.Length == 0)
        {
            Debug.Log("[OrderManager] Boxes –Ω–µ –∑–∞–¥–∞–Ω—ã, –∏—â–µ–º –≤ —Å—Ü–µ–Ω–µ (–≤–∫–ª—é—á–∞—è –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ)...");
            boxes = FindObjectsOfType<Box>(true);
            Debug.Log($"[OrderManager] –ù–∞–π–¥–µ–Ω–æ Box –≤ —Å—Ü–µ–Ω–µ: {boxes.Length}");
        }
        else
        {
            Debug.Log($"[OrderManager] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–¥–∞–Ω–Ω—ã–µ Boxes: {boxes.Length}");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–æ—Ä–æ–±–∫—É
        for (int i = 0; i < boxes.Length; i++)
        {
            if (boxes[i] != null)
            {
                Debug.Log($"[OrderManager] Box[{i}]: {boxes[i].name}, Level: {boxes[i].level}, Active: {boxes[i].gameObject.activeInHierarchy}, Content: '{boxes[i].contentName}', Price: {boxes[i].price}, HasHome: {boxes[i].HasHomePosition}");
            }
            else
            {
                Debug.LogWarning($"[OrderManager] Box[{i}] is NULL!");
            }
        }

        Debug.Log("[OrderManager] Awake() –∑–∞–≤–µ—Ä—à—ë–Ω");
    }

    void Start()
    {
        Debug.Log($"[OrderManager] Start() - AutoGenerate: {autoGenerate}");
        if (autoGenerate)
        {
            Debug.Log($"[OrderManager] –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {spawnInterval} —Å–µ–∫, –º–∞–∫—Å –∑–∞–∫–∞–∑–æ–≤: {maxActiveOrders}");
            StartCoroutine(GenerateLoop());
        }
        else
        {
            Debug.Log("[OrderManager] –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞");
        }
    }

    IEnumerator GenerateLoop()
    {
        Debug.Log("[OrderManager] GenerateLoop() –Ω–∞—á–∞—Ç");
        var wait = new WaitForSeconds(spawnInterval);
        int loopCounter = 0;
        
        while (true)
        {
            loopCounter++;
            Debug.Log($"[OrderManager] GenerateLoop –∏—Ç–µ—Ä–∞—Ü–∏—è #{loopCounter}, –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {_active.Count}/{maxActiveOrders}");
            
            if (_active.Count < maxActiveOrders)
            {
                Debug.Log("[OrderManager] –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑...");
                CreateOrder();
            }
            else
            {
                Debug.Log("[OrderManager] –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤, –∂–¥—ë–º...");
            }
            
            Debug.Log($"[OrderManager] –ñ–¥—ë–º {spawnInterval} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏...");
            yield return wait;
        }
    }

    public void CreateOrder()
    {
        Debug.Log("[OrderManager] CreateOrder() - –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞");
        
        if (dropoffs == null || dropoffs.Length == 0)
        {
            Debug.LogError("[OrderManager] CreateOrder() - –ù–ï–¢ DROPOFFS! –ó–∞–∫–∞–∑ –Ω–µ —Å–æ–∑–¥–∞–Ω.");
            return;
        }

        Debug.Log("[OrderManager] –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–æ—Ä–æ–±–∫–∏...");
        var candidates = boxes.Where(b =>
            b != null &&
            !b.gameObject.activeInHierarchy &&
            !b.IsAssigned &&
            IsLevelUnlocked(b.level)
        ).ToList();

        Debug.Log($"[OrderManager] –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {candidates.Count}");
        
        if (candidates.Count == 0)
        {
            Debug.LogWarning("[OrderManager] –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–æ—Ä–æ–±–æ–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞!");
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            Debug.Log("[OrderManager] –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ—Ä–æ–±–æ–∫:");
            for (int i = 0; i < boxes.Length; i++)
            {
                if (boxes[i] != null)
                {
                    Debug.Log($"[OrderManager]   Box[{i}] {boxes[i].name}: Active={boxes[i].gameObject.activeInHierarchy}, Assigned={boxes[i].IsAssigned}, Level={boxes[i].level}, LevelUnlocked={IsLevelUnlocked(boxes[i].level)}");
                }
            }
            return;
        }

        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–æ—Ä–æ–±–∫—É
        int boxIndex = UnityEngine.Random.Range(0, candidates.Count);
        var box = candidates[boxIndex];
        Debug.Log($"[OrderManager] –í—ã–±—Ä–∞–Ω–∞ –∫–æ—Ä–æ–±–∫–∞: {box.name} (–∏–Ω–¥–µ–∫—Å {boxIndex} –∏–∑ {candidates.Count} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤)");

        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π dropoff
        int dropoffIndex = UnityEngine.Random.Range(0, dropoffs.Length);
        var dropoff = dropoffs[dropoffIndex];
        Debug.Log($"[OrderManager] –í—ã–±—Ä–∞–Ω dropoff: {dropoff.name} (–∏–Ω–¥–µ–∫—Å {dropoffIndex} –∏–∑ {dropoffs.Length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö)");

        // –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
        var order = new Order
        {
            id = NewId(),
            box = box,
            dropoff = dropoff
        };

        Debug.Log($"[OrderManager] –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ ID: {order.id}");
        Debug.Log($"[OrderManager] –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–æ—Ä–æ–±–∫–µ...");
        
        box.Assign(order.id, dropoff);
        
        Debug.Log($"[OrderManager] –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ—Ä–æ–±–∫—É {box.name}...");
        box.gameObject.SetActive(true);
        // –ü—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ—Ä–æ–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –¥–æ–º–∞—à–Ω—é—é –ø–æ–∑–∏—Ü–∏—é –≤ OnEnable()
        
        _active.Add(order);
        
        Debug.Log($"[OrderManager] ‚úÖ –ó–ê–ö–ê–ó –°–û–ó–î–ê–ù! ID: {order.id} | Level: {box.level} | Item: '{box.contentName}' (${box.price}) | From: {box.transform.position} | To: {dropoff.name}");
        Debug.Log($"[OrderManager] –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Ç–µ–ø–µ—Ä—å: {_active.Count}");
    }

    public bool TryComplete(Box box, DropoffPoint atDropoff)
    {
        Debug.Log($"[OrderManager] TryComplete() - –ö–æ—Ä–æ–±–∫–∞ {box.name} –ø–æ–ø–∞–ª–∞ –≤ Dropoff {atDropoff.name}");
        
        int idx = _active.FindIndex(o => o.box == box);
        Debug.Log($"[OrderManager] –ò—â–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –∫–æ—Ä–æ–±–∫–∏ {box.name}... –Ω–∞–π–¥–µ–Ω –∏–Ω–¥–µ–∫—Å: {idx}");
        
        if (idx < 0)
        {
            Debug.LogWarning($"[OrderManager] –ö–æ—Ä–æ–±–∫–∞ {box.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö! –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–∫–∞–∑ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω –∏–ª–∏ –∫–æ—Ä–æ–±–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞.");
            return false;
        }

        var order = _active[idx];
        Debug.Log($"[OrderManager] –ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ ID: {order.id}, —Ü–µ–ª–µ–≤–æ–π dropoff: {order.dropoff.name}");
        
        if (order.dropoff != atDropoff)
        {
            Debug.LogWarning($"[OrderManager] ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô DROPOFF! –ö–æ—Ä–æ–±–∫–∞ {box.name} –ø–æ–ø–∞–ª–∞ –≤ {atDropoff.name}, –∞ –Ω—É–∂–Ω–æ –≤ {order.dropoff.name}");
            return false;
        }

        Debug.Log($"[OrderManager] ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô DROPOFF! –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–∫–∞–∑ {order.id}");
        
        _active.RemoveAt(idx);
        Debug.Log($"[OrderManager] –ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö. –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–Ω—ã—Ö: {_active.Count}");

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–æ–±–∫—É –¥–æ–º–æ–π (–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é)
        Debug.Log($"[OrderManager] –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–æ–±–∫—É {box.name} –≤ –¥–æ–º–∞—à–Ω—é—é –ø–æ–∑–∏—Ü–∏—é...");
        box.ReturnHome();

        Debug.Log($"[OrderManager] –û—á–∏—â–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ä–æ–±–∫–∏...");
        box.ClearAssignment();
        
        Debug.Log($"[OrderManager] –í—ã–∫–ª—é—á–∞–µ–º –∫–æ—Ä–æ–±–∫—É {box.name}...");
        box.gameObject.SetActive(false);

        Debug.Log($"[OrderManager] üéâ –ó–ê–ö–ê–ó –î–û–°–¢–ê–í–õ–ï–ù! ID: {order.id} | Item: '{box.contentName}' (${box.price}) | Dropoff: {atDropoff.name}");
        return true;
    }

    public bool IsLevelUnlocked(int level)
    {
        bool unlocked = true; // –ó–∞–≥–ª—É—à–∫–∞ - –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        Debug.Log($"[OrderManager] IsLevelUnlocked({level}) = {unlocked}");
        return unlocked;
    }

    string NewId()
    {
        _idCounter++;
        string id = _idCounter.ToString();
        Debug.Log($"[OrderManager] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π ID: {id}");
        return id;
    }

    void OnDestroy()
    {
        Debug.Log("[OrderManager] OnDestroy() - –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–∫–∞–∑–æ–≤ —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è");
    }
}